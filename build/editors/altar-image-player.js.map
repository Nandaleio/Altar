{"version":3,"file":"altar-image-player.js","sourceRoot":"","sources":["../../src/editors/altar-image-player.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAmB,IAAI,EAAC,MAAM,KAAK,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAIpD,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,WAA4C;IAEvE,KAAK,CAAC,YAAY,CAAC,kBAA0C;QACpE,KAAK,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAEvC,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAA;QAC7B,MAAM,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;QAE1E,IAAG,CAAC,GAAG;YAAE,OAAO;QAEhB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC;QACtB,GAAG,CAAC,MAAM,GAAG;QACb,CAAC,CAAA;QACD,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;KAGV,CAAC;IACJ,CAAC;CAEF,CAAA;AAvBY,gBAAgB;IAD5B,aAAa,CAAC,oBAAoB,CAAC;GACvB,gBAAgB,CAuB5B;SAvBY,gBAAgB","sourcesContent":["import {PropertyValueMap, html} from 'lit';\r\nimport { customElement } from 'lit/decorators.js';\r\nimport { AltarPlayer } from './player/altar-player';\r\nimport { ImageControl } from './controls/image-control';\r\n\r\n@customElement('altar-image-player')\r\nexport class AltarImagePlayer extends AltarPlayer<HTMLCanvasElement, ImageControl> {\r\n\r\n  override async firstUpdated(_changedProperties: PropertyValueMap<this>) {\r\n    super.firstUpdated(_changedProperties);  \r\n\r\n    const el = await this.element\r\n    const ctx = el.getContext(\"webgl\") || el.getContext(\"experimental-webgl\");\r\n\r\n    if(!ctx) return;\r\n\r\n    const img = new Image;\r\n    img.onload = function() {\r\n    }\r\n    img.src = URL.createObjectURL(this.file);\r\n  }\r\n\r\n  override render() {\r\n    return html`\r\n      <canvas id=\"altar-player-element\"></canvas>\r\n      <altar-image-control class=\"altar-control-element\"></altar-image-control>\r\n    `;\r\n  }\r\n\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'altar-image-player': AltarImagePlayer;\r\n  }\r\n}\r\n"]}