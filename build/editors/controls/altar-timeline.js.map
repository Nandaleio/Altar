{"version":3,"file":"altar-timeline.js","sourceRoot":"","sources":["../../../src/editors/controls/altar-timeline.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAI5C,OAAO,6BAA6B,CAAC;AAGrC,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,UAAU;IAA7C;;QAGI,aAAQ,GAAa,EAAE,CAAC;QAGxB,aAAQ,GAAW,CAAC,CAAC;IAsCzB,CAAC;IAjCW,UAAU;QACd,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,GAAG,CAAC;QACjD,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAC,CAAC,CAAC,CAAA;IAC5G,CAAC;IAAA,CAAC;IAEO,MAAM;;QACX,OAAO,IAAI,CAAA;UACT,MAAA,IAAI,CAAC,QAAQ,0CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAA;wDACgB,CAAC;SAChD,CAAC;4BACkB,IAAI,CAAC,QAAQ,GAAG,GAAG,YAAY,IAAI,CAAC,UAAU;SACjE,CAAC;IACN,CAAC;CAqBJ,CAAA;AAnBmB,oBAAM,GAAG;IACrB,GAAG,CAAA;;;;;;;;;;;;;;;SAeF;CACH,CAAA;AAvCF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;+CACA;AAGxB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;+CACJ;AAGrB;IADC,KAAK,CAAC,WAAW,CAAC;kDACI;AATd,aAAa;IADzB,aAAa,CAAC,gBAAgB,CAAC;GACnB,aAAa,CA4CzB;SA5CY,aAAa","sourcesContent":["import { customElement, property, query } from \"lit/decorators.js\";\r\nimport { html, css, LitElement } from \"lit\";\r\nimport { MdSlider } from \"@material/web/slider/slider\";\r\n\r\n\r\nimport '@material/web/slider/slider';\r\n\r\n@customElement('altar-timeline')\r\nexport class AltarTimeLine extends LitElement {\r\n\r\n    @property({type: Array})\r\n    comments: number[] = [];\r\n\r\n    @property({type: Number})\r\n    progress: number = 0;\r\n\r\n    @query('md-slider')\r\n    progressBar!: MdSlider;\r\n\r\n    private changeTime() {\r\n        const timePercent = this.progressBar.value / 100;\r\n        this.dispatchEvent(new CustomEvent('change-time', {bubbles: true, composed: true, detail: timePercent}))\r\n    };\r\n\r\n    override render() {\r\n        return html`\r\n        ${this.comments?.map((_) => html`\r\n            <div class=\"timeline-markup\" style=\"left: ${_}%;\"></div>\r\n        `)}\r\n        <md-slider .value=${this.progress * 100} @change=${this.changeTime}></md-slider>\r\n        `;\r\n    }\r\n\r\n    static override styles = [\r\n        css`\r\n        :host {\r\n            height: 2rem;\r\n            position: relative;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n        }\r\n        .timeline-markup {\r\n            z-index: 1;\r\n            width: 3px;\r\n            height: 4px;\r\n            background-color: red;\r\n            position: absolute;\r\n        }\r\n        `\r\n    ];\r\n\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n      'altar-timeline': AltarTimeLine;\r\n    }\r\n  }"]}