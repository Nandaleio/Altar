{"version":3,"file":"audio-control.js","sourceRoot":"","sources":["../../../src/editors/controls/audio-control.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAGhC,OAAO,6BAA6B,CAAC;AACrC,OAAO,kDAAkD,CAAC;AAC1D,OAAO,4BAA4B,CAAC;AAGpC,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,YAA8B;IAAhE;;QAMI,UAAK,GAAY,KAAK,CAAC;QAGvB,eAAU,GAAY,KAAK,CAAC;QAenB,gBAAW,GAAG,GAAG,EAAE,CAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC5C,iBAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IA8B1D,CAAC;IA5CsB,iBAAiB,CAAC,EAAoB;QACrD,EAAE,CAAC,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,GAAG,CAAC,CAAA;IAClF,CAAC;IAEO,YAAY;QAChB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAC,GAAG,CAAC;IAChD,CAAC;IAEO,IAAI;QACR,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAA;QACxB,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IACpC,CAAC;IAKQ,MAAM;QACX,OAAO,IAAI,CAAA;;6BAEU,CAAC,IAAI,CAAC,UAAU,YAAY,IAAI,CAAC,YAAY;;;2CAG/B,IAAI,CAAC,IAAI;uBAC7B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW;;;SAGrD,CAAC;IACN,CAAC;CAiBJ,CAAA;AAfmB,mBAAM,GAAG;IACrB,GAAG,YAAY,CAAC,MAAM;IACtB,GAAG,CAAA;;;;;;;;;;;;OAYJ;CAAC,CAAA;AAnDJ;IADC,KAAK,CAAC,WAAW,CAAC;4CACD;AAGlB;IADC,KAAK,EAAE;2CACe;AAGvB;IADC,KAAK,EAAE;gDACoB;AATnB,YAAY;IADxB,aAAa,CAAC,qBAAqB,CAAC;GACxB,YAAY,CAuDxB;SAvDY,YAAY","sourcesContent":["import { customElement, query, state } from \"lit/decorators.js\";\r\nimport { AltarControl } from \"./altar-control\";\r\nimport { css, html } from \"lit\";\r\nimport { MdSlider } from '@material/web/slider/slider'\r\n\r\nimport '@material/web/slider/slider';\r\nimport '@material/web/iconbutton/standard-icon-button.js';\r\nimport '@material/web/icon/icon.js';\r\n\r\n@customElement('altar-audio-control')\r\nexport class AudioControl extends AltarControl<HTMLMediaElement> {\r\n    \r\n    @query('md-slider')\r\n    slider!: MdSlider;\r\n\r\n    @state()\r\n    muted: boolean = false;\r\n\r\n    @state()\r\n    showSlider: boolean = false;\r\n\r\n    protected override setEventListeners(el: HTMLMediaElement): void {\r\n        el.addEventListener('volumechange', () => this.slider.value = el.volume * 100)\r\n    }\r\n\r\n    private changeVolume() {\r\n        this.element.volume = this.slider.value/100;\r\n    }\r\n\r\n    private mute(){\r\n        this.muted = !this.muted\r\n        this.element.muted = this.muted;\r\n    }\r\n\r\n    override onmouseover = () =>  this.showSlider = true;\r\n    override onmouseleave = () => this.showSlider = false;\r\n\r\n    override render() {\r\n        return html`\r\n        \r\n        <md-slider ?hidden=${!this.showSlider} @change=${this.changeVolume}>\r\n        </md-slider>\r\n        \r\n        <md-standard-icon-button @click=\"${this.mute}\">\r\n            <md-icon>${this.muted ? 'volume_off' : 'volume_up'}</md-icon>\r\n        </md-standard-icon-button>\r\n        \r\n        `;\r\n    }\r\n    \r\n    static override styles = [\r\n        ...AltarControl.styles,\r\n        css`\r\n            :host {\r\n                display: flex;\r\n                align-items: center;\r\n\r\n                border-radius: 25px;\r\n                background-color: white;\r\n            }\r\n\r\n            md-slider[hidden] {\r\n                display: none;\r\n            }\r\n      `]\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n      'altar-audio-control': AudioControl;\r\n    }\r\n}"]}