{"version":3,"file":"time-control.js","sourceRoot":"","sources":["../../../src/editors/controls/time-control.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAEhC,OAAO,2BAA2B,CAAC;AACnC,OAAO,kDAAkD,CAAC;AAC1D,OAAO,4BAA4B,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAGrD,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,YAA8B;IAA/D;;QAGI,cAAS,GAAY,KAAK,CAAC;QAG3B,mBAAc,GAAW,CAAC,CAAC;QAG3B,qBAAgB,GAAa,EAAE,CAAC;IA2DpC,CAAC;IAzDsB,KAAK,CAAC,cAAc;QACnC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QACpD,KAAK,CAAC,cAAc,EAAE,CAAC;IACzB,CAAC;IAEO,iBAAiB,CAAC,EAAoB;QAC5C,EAAE,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAC9D,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAClE,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;QAC5D,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;QAC1D,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;IAChE,CAAC;IAED,UAAU;QACN,IAAG,IAAI,CAAC,SAAS;YAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;;YAClC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,iBAAiB,CAAC,EAAe;QAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC7D,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEQ,MAAM;;QACX,OAAO,IAAI,CAAA;2CACwB,IAAI,CAAC,UAAU;uBACnC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY;;;UAGpD,UAAU,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,WAAW,CAAC,MAAM,UAAU,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,QAAQ,CAAC;;;oBAGnE,IAAI,CAAC,gBAAgB;oBACrB,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,WAAW,KAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,QAAQ,CAAA;uBAC/C,IAAI,CAAC,iBAAiB;SACpC,CAAC;IACN,CAAC;CAqBJ,CAAA;AAlBmB,kBAAM,GAAG;IACrB,GAAG,YAAY,CAAC,MAAM;IACtB,GAAG,CAAA;;;;;;;;;;;;;;SAcF;CACH,CAAA;AAhEF;IADC,KAAK,EAAE;8CACmB;AAG3B;IADC,KAAK,EAAE;mDACmB;AAG3B;IADC,KAAK,EAAE;qDACwB;AATvB,WAAW;IADvB,aAAa,CAAC,oBAAoB,CAAC;GACvB,WAAW,CAoEvB;SApEY,WAAW","sourcesContent":["import { customElement, state } from \"lit/decorators.js\";\r\nimport { AltarControl } from \"./altar-control\";\r\nimport { css, html } from \"lit\";\r\n\r\nimport './elements/altar-timeline';\r\nimport '@material/web/iconbutton/standard-icon-button.js';\r\nimport '@material/web/icon/icon.js';\r\nimport { formatTime } from \"../../utils/text-format\";\r\n\r\n@customElement('altar-time-control')\r\nexport class TimeControl extends AltarControl<HTMLMediaElement> {\r\n\r\n    @state()\r\n    isPlaying: boolean = false;\r\n\r\n    @state()\r\n    currentProgess: number = 0;\r\n\r\n    @state()\r\n    commentsPosition: number[] = [];\r\n\r\n    protected override async scheduleUpdate(): Promise<void> {\r\n        await new Promise((resolve) => setTimeout(resolve));\r\n        super.scheduleUpdate();\r\n      }\r\n\r\n    protected setEventListeners(el: HTMLMediaElement): void {\r\n        el.addEventListener('timeupdate', () => this.requestUpdate());\r\n        el.addEventListener('durationchange', () => this.requestUpdate());\r\n        el.addEventListener('ended' , () => this.isPlaying = false);\r\n        el.addEventListener('play' , () => this.isPlaying = true);\r\n        el.addEventListener('pause' , () => this.isPlaying = false);\r\n    }\r\n\r\n    togglePlay() {\r\n        if(this.isPlaying)this.element.pause();\r\n        else this.element.play();\r\n    }\r\n\r\n    changeCurrentTime(ev: CustomEvent){\r\n        this.element.currentTime = ev.detail * this.element.duration;\r\n        this.requestUpdate();\r\n    }\r\n\r\n    override render() {\r\n        return html`\r\n        <md-standard-icon-button @click=\"${this.togglePlay}\">\r\n            <md-icon>${this.isPlaying ? 'pause' : 'play_arrow'}</md-icon>\r\n        </md-standard-icon-button>\r\n\r\n        ${formatTime(this.element?.currentTime)} / ${formatTime(this.element?.duration)}\r\n\r\n        <altar-timeline \r\n        .comments=${this.commentsPosition} \r\n        .progress=${this.element?.currentTime / this.element?.duration}\r\n        @change-time=${this.changeCurrentTime}></altar-timeline>\r\n        `;\r\n    }\r\n\r\n    \r\n    static override styles = [\r\n        ...AltarControl.styles,\r\n        css`\r\n        :host {\r\n            display: flex;\r\n            align-items: center;\r\n            margin: 0.5rem;\r\n            gap: 0.2rem;\r\n            border-radius: 25px;\r\n            background-color: white;\r\n            flex-grow: 1;\r\n        }\r\n\r\n        altar-timeline {\r\n            flex-grow: 1;\r\n        }\r\n        `\r\n    ];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n      'altar-time-control': TimeControl;\r\n    }\r\n}"]}