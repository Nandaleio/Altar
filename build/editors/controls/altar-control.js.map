{"version":3,"file":"altar-control.js","sourceRoot":"","sources":["../../../src/editors/controls/altar-control.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAEhD,MAAM,OAAgB,YAAgB,SAAQ,UAAU;IAS3C,MAAM,CAAC,iBAAuC;QACnD,IAAI,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACpD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;SACrC;QACD,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;;AAZe,mBAAM,GAAG,CAAC,UAAU,CAAC,CAAC;AAGtC;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;6CACb","sourcesContent":["import { LitElement } from \"lit\";\r\nimport { property } from \"lit/decorators.js\";\r\nimport { IconStyles } from \"../../styles/icons\";\r\n\r\nexport abstract class AltarControl<T> extends LitElement {\r\n\r\n    static override styles = [IconStyles];\r\n\r\n    @property({type: Object})\r\n    element!: T;\r\n\r\n    protected abstract setEventListeners(el: T): void;\r\n\r\n    override update(changedProperties: Map<string, unknown>) {\r\n        if (changedProperties.has(\"element\") && this.element) {\r\n          this.setEventListeners(this.element)\r\n        }\r\n        super.update(changedProperties);\r\n    }\r\n    \r\n}"]}