{"version":3,"file":"altar-text-player.js","sourceRoot":"","sources":["../../src/editors/altar-text-player.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAoB,IAAI,EAAC,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAC,aAAa,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,WAAuB;IAK/C,YAAY,CAAC,iBAAyC;QAC3D,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG,CAAC,GAA8B,EAAE,EAAE;;YAC/C,IAAI,CAAC,WAAW,GAAG,MAAA,GAAG,CAAC,MAAM,0CAAE,MAAM,CAAC;QAC1C,CAAC,CAAA;QACD,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE;YAClB,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC;QAC5C,CAAC,CAAA;QACD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAEQ,MAAM;QACX,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IACrC,CAAC;CAEJ,CAAA;AAnBG;IADC,KAAK,EAAE;oDAC6C;AAH5C,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CAsB3B;SAtBY,eAAe","sourcesContent":["import { PropertyValueMap, html} from 'lit';\r\nimport {customElement, state} from 'lit/decorators.js';\r\nimport { AltarPlayer } from './player/altar-player';\r\n\r\n@customElement('altar-text-player')\r\nexport class AltarTextPlayer extends AltarPlayer<null, null> {\r\n\r\n    @state()\r\n    fileContent!: string | ArrayBuffer | undefined | null\r\n\r\n    override firstUpdated(changedProperties: PropertyValueMap<this>) {\r\n        super.firstUpdated(changedProperties);\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (evt: ProgressEvent<FileReader>) => {\r\n            this.fileContent = evt.target?.result;\r\n        }\r\n        reader.onerror = () => {\r\n            this.fileContent = \"error reading file\";\r\n        }\r\n        reader.readAsText(this.file, \"UTF-8\");\r\n    }\r\n\r\n    override render() {\r\n        return html`${this.fileContent}`;\r\n    }\r\n\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'altar-text-player': AltarTextPlayer;\r\n  }\r\n}\r\n"]}