{"version":3,"file":"altar-comment-editor.js","sourceRoot":"","sources":["../../../src/editors/comments/altar-comment-editor.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAClE,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEnE,OAAO,sCAAsC,CAAA;AAG7C,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,UAAU;IAAlD;;QAMI,SAAI,GAAY,KAAK,CAAC;IAkD1B,CAAC;IAhDU,oBAAoB,CAAC,OAAoB;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE;YAC7B,UAAU,EAAE,CAAC,aAAa,EAAE,CAAC;SAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,EAAE,CAAC,EAAC,EAAE,EAAE;YACjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE;gBACxB,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,GAAG,EAAE,GAAG,CAAC,IAAI;aACd,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAC,CAAC,CAAC,CAAA;IAC3H,CAAC;IAED,aAAa;QACX,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,EAAE,CAAC;IACpC,CAAC;IAEM,MAAM;QACb,OAAO,IAAI,CAAA;gDACiC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;;;sCAGrC,IAAI,CAAC,WAAW;sCAChB,IAAI,CAAC,aAAa;;;OAGjD,CAAC;IACN,CAAC;CAgBF,CAAA;AAdiB,yBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;GAa1B,CAAA;AApDA;IADC,KAAK,CAAC,oBAAoB,CAAC;6DACY;AAGxC;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;gDACJ;AANb,kBAAkB;IAD9B,aAAa,CAAC,sBAAsB,CAAC;GACzB,kBAAkB,CAwD9B;SAxDY,kBAAkB","sourcesContent":["import { computePosition, autoPlacement } from '@floating-ui/dom';\r\nimport {LitElement, html, css} from 'lit';\r\nimport { customElement, property, query } from 'lit/decorators.js';\r\n\r\nimport '@material/web/button/outlined-button'\r\n\r\n@customElement('altar-comment-editor')\r\nexport class AltarCommentEditor extends LitElement {\r\n\r\n    @query('#altar-text-editor')\r\n    editorBaseElement!: HTMLTextAreaElement;\r\n\r\n    @property({type: Boolean})\r\n    show: boolean = false;\r\n\r\n    public showCommentAtElement(element: HTMLElement) {\r\n      this.show = true;\r\n      computePosition(element, this, {\r\n        middleware: [autoPlacement()],\r\n      }).then(({x, y}) => {\r\n        Object.assign(this.style, {\r\n          left: `${x}px`,\r\n          top: `${y}px`,\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n    saveComment() {\r\n      this.dispatchEvent(new CustomEvent('SaveComment', {bubbles: true, composed: true, detail: this.editorBaseElement.value}))\r\n    }\r\n\r\n    cancelComment() {\r\n      this.show = false;\r\n      this.editorBaseElement.value = '';\r\n    }\r\n\r\n  override render() {\r\n    return html`\r\n    <div class=\"main-content\" style=\"display: ${this.show ? 'flex' : 'none'}\">\r\n      <textarea id=\"altar-text-editor\"></textarea>\r\n      <div class=\"actions\">\r\n        <md-outlined-button @click=\"${this.saveComment}\">Save</md-outlined-button>\r\n        <md-outlined-button @click=\"${this.cancelComment}\">Cancel</md-outlined-button>\r\n      </div>\r\n    </div>\r\n      `;\r\n  }\r\n\r\n  static override styles = css`\r\n  \r\n    :host {\r\n      position: absolute;\r\n      z-index: 1;\r\n    }\r\n    .main-content {\r\n      flex-direction: column;\r\n    }\r\n    .actions {\r\n      background-color: white;\r\n      border-radius: 25px;\r\n    }\r\n  `;\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'altar-comment-editor': AltarCommentEditor;\r\n  }\r\n}\r\n"]}