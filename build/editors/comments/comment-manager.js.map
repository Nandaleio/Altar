{"version":3,"file":"comment-manager.js","sourceRoot":"","sources":["../../../src/editors/comments/comment-manager.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,cAAc;IAA3B;QAEW,oBAAe,GAAW,EAAE,CAAC;IAcxC,CAAC;IAZG,KAAK,CAAC,iBAAiB;QACnB,IAAG,IAAI,CAAC,eAAe;YACnB,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEtD,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAe,EAAE,cAAsB;QACtD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7C,OAAO,EAAC,GAAG,UAAU,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,cAAc,EAAC,CAAC;IAC/D,CAAC;CAEJ","sourcesContent":["export class CommentManager {\r\n\r\n    public newCommentIdUrl: string = '';\r\n\r\n    async fetchNewCommentId(): Promise<string> {\r\n        if(this.newCommentIdUrl) \r\n            return (await fetch(this.newCommentIdUrl)).text();\r\n        \r\n        return crypto.randomUUID();\r\n    }\r\n\r\n    async buildComment(playerInfo: any, commentContent: string): Promise<any> {\r\n        const newId = await this.fetchNewCommentId();\r\n        return {...playerInfo, id: newId, comment: commentContent};\r\n    }\r\n\r\n}"]}