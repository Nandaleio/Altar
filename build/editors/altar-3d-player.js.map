{"version":3,"file":"altar-3d-player.js","sourceRoot":"","sources":["../../src/editors/altar-3d-player.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAChC,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAElD,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,8CAA8C,CAAC;AAC7E,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACpE,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,yCAAyC,CAAC;AAGpE,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,gBAA0C;IAEhE,MAAM;QACX,OAAO,IAAI,CAAA;;iDAE8B,IAAI,CAAC,aAAa;SAC1D,CAAC;IACN,CAAC;IAEkB,KAAK,CAAC,SAAS;QAChC,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAA;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAE3B,MAAM,CAAC,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE7C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAA;QAClC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,GAAG,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAElB,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CACP,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAC7B,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAE,CAAE,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAE,GAAG,UAAU,CAAE,EACrE,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAE,mBAAmB,EAAE,KAAK,CAAC,CACxD,CAAC;IACJ,CAAC;IAQe,aAAa;QACzB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;CACJ,CAAA;AATmB,oBAAM,GAAG;IACvB,GAAG,WAAW,CAAC,MAAM;IACrB,GAAG,CAAA;KACJ;CAAE,CAAA;AAjCM,aAAa;IADzB,aAAa,CAAC,iBAAiB,CAAC;GACpB,aAAa,CAuCzB;SAvCY,aAAa","sourcesContent":["import { css, html } from 'lit';\r\nimport { customElement } from 'lit/decorators.js';\r\nimport { Comment3D } from './comments/models';\r\nimport { AltarThreePlayer } from './player/altar-three-player';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { AmbientLight, PerspectiveCamera, PointLight } from 'three';\r\nimport { AltarPlayer } from './player/altar-player';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\n\r\n@customElement('altar-3d-player')\r\nexport class Altar3DPlayer extends AltarThreePlayer<OrbitControls, Comment3D> {\r\n\r\n    override render() {\r\n        return html`\r\n        <canvas id=\"altar-player-element\"></canvas>\r\n        <altar-comment-trigger ?isCommentMode=\"${this.isCommentMode}\"></altar-comment-trigger>\r\n        `;\r\n    }\r\n    \r\n    protected override async initThree() {\r\n      const el = await this.element\r\n      this.camera = new PerspectiveCamera(); \r\n      this.camera.position.z = 5;\r\n\r\n      const c = new OrbitControls(this.camera, el);\r\n\r\n      this.scene.add(new AmbientLight(0xaaaaaa));\r\n      const l = new PointLight(0xffffff)\r\n      l.position.y += 100;\r\n      this.scene.add(l);\r\n\r\n      const loader = new OBJLoader();\r\n      loader.load(\r\n          URL.createObjectURL(this.file),\r\n          this.loadRessource.bind(this), \r\n          (xhr) => console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ),\r\n          (error) => console.error( 'An error happened' ,error)\r\n      );\r\n    }\r\n\r\n    static override styles = [\r\n      ...AltarPlayer.styles,\r\n      css`\r\n    `];\r\n\r\n    \r\n    public override getPlayerInfo(): Comment3D {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'altar-3d-player': Altar3DPlayer;\r\n  }\r\n}\r\n"]}