{"version":3,"file":"altar-element.js","sourceRoot":"","sources":["../src/altar-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAkB,GAAG,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AAC1D,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAEjE,OAAO,uBAAuB,CAAC;AAC/B,OAAO,yCAAyC,CAAC;AAIjD,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,UAAU;IAQxC,YAAY,CAAC,OAA0B;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IAC/B,CAAC;IAEQ,iBAAiB;QACtB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,EAAS,EAAE,EAAE;YAClD,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAE,EAAkB,CAAC,MAAqB,CAAC,CAAA;QACtF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,EAAS,EAAE,EAAE;YAC/C,OAAO,CAAC,GAAG,CAAC,aAAa,EAAG,EAAkB,CAAC,MAAM,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAC;IAEP,CAAC;IAaQ,MAAM;QACX,OAAO,IAAI,CAAA;cACL,IAAI,CAAC,IAAI;YACP,CAAC,CAAC,IAAI,CAAA;sBACA,IAAI,CAAC,SAAS,EAAE;iBACrB;YACD,CAAC,CAAC,IAAI,CAAA,wCAAwC,IAAI,CAAC,YAAY,2BAA2B;;;SAGjG,CAAC;IACN,CAAC;IAED,SAAS;QACL,QAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC;YAClB,KAAK,YAAY;gBACb,MAAM,CAAC,6BAA6B,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAA,6BAA6B,IAAI,CAAC,IAAI,wBAAwB,CAAC;YAE9E,KAAK,YAAY,CAAC;YAClB,KAAK,WAAW,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,gBAAgB;gBACjB,MAAM,CAAC,8BAA8B,CAAC,CAAC;gBACvC,OAAO,IAAI,CAAA,8BAA8B,IAAI,CAAC,IAAI,yBAAyB,CAAC;YAEhF,KAAK,iBAAiB;gBAClB,OAAO,IAAI,CAAA,4BAA4B,IAAI,CAAC,IAAI,uBAAuB,CAAC;YAE5E,KAAK,WAAW,CAAC;YACjB,KAAK,YAAY,CAAC;YAClB,KAAK,aAAa,CAAC;YACnB,KAAK,iBAAiB,CAAC;YACvB,KAAK,WAAW;gBACZ,MAAM,CAAC,8BAA8B,CAAC,CAAC;gBACvC,OAAO,IAAI,CAAA,8BAA8B,IAAI,CAAC,IAAI,yBAAyB,CAAC;YAEhF,KAAK,YAAY,CAAC;YAClB,KAAK,aAAa;gBACd,MAAM,CAAC,8BAA8B,CAAC,CAAC;gBACvC,OAAO,IAAI,CAAA,8BAA8B,IAAI,CAAC,IAAI,yBAAyB,CAAC;YAEhF;gBACI,OAAO,IAAI,CAAA,sCAAsC,CAAC;SAEzD;IACL,CAAC;CACJ,CAAA;AA1DmB,mBAAM,GAAG,GAAG,CAAA;;;;;;;;;GAS5B,CAAA;AA9BA;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;0CACb;AAGZ;IADC,KAAK,CAAC,sBAAsB,CAAC;mDACI;AANzB,YAAY;IADxB,aAAa,CAAC,eAAe,CAAC;GAClB,YAAY,CAkFxB;SAlFY,YAAY","sourcesContent":["import {LitElement, TemplateResult, css, html} from 'lit';\r\nimport {customElement, property, query} from 'lit/decorators.js';\r\n\r\nimport './altar-file-selector';\r\nimport './editors/comments/altar-comment-editor';\r\nimport { AltarCommentEditor } from './editors/comments/altar-comment-editor';\r\n\r\n@customElement('altar-element')\r\nexport class AltarElement extends LitElement {\r\n\r\n    @property({type: Object})\r\n    file!: File;\r\n\r\n    @query(\"altar-comment-editor\")\r\n    commentEditor!: AltarCommentEditor\r\n\r\n    fileSelected(newFile: CustomEvent<File>) {\r\n        this.file = newFile.detail;\r\n    }\r\n\r\n    override connectedCallback(): void {\r\n        super.connectedCallback();\r\n        this.addEventListener('openCommentBox', (ev: Event) => {\r\n            this.commentEditor.showCommentAtElement((ev as CustomEvent).detail as HTMLElement)\r\n        });\r\n\r\n        this.addEventListener('SaveComment', (ev: Event) => {\r\n            console.log('SaveComment', (ev as CustomEvent).detail)\r\n        });\r\n        \r\n    }\r\n\r\n    static override styles = css`\r\n    :host {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        overflow: hidden;\r\n    }\r\n  `;\r\n\r\n    override render() {\r\n        return html`\r\n            ${this.file \r\n                ? html` \r\n                    ${this.getEditor()} \r\n                `\r\n                : html`<altar-file-selector @file-selected=\"${this.fileSelected}\" ></altar-file-selector>`}\r\n\r\n                <altar-comment-editor></altar-comment-editor>\r\n        `;\r\n    }\r\n\r\n    getEditor(): TemplateResult {\r\n        switch(this.file.type){\r\n            case \"text/plain\":\r\n                import('./editors/altar-text-player');\r\n                return html`<altar-text-player .file=\"${this.file}\"></altar-text-player>`;\r\n            \r\n            case \"image/jpeg\":\r\n            case \"image/png\":\r\n            case \"image/gif\":\r\n            case \"image/bmp\":\r\n            case \"image/x-ms-bmp\":\r\n                import('./editors/altar-image-player');\r\n                return html`<altar-image-player .file=\"${this.file}\"></altar-image-player>`;\r\n\r\n            case \"application/pdf\":\r\n                return html`<altar-pdf-player .file=\"${this.file}\"></altar-pdf-player>`;\r\n\r\n            case \"video/mp4\":\r\n            case \"video/webm\":\r\n            case \"video/x-m4v\":\r\n            case \"video/quicktime\":\r\n            case \"video/ogg\":\r\n                import('./editors/altar-video-player');\r\n                return html`<altar-video-player .file=\"${this.file}\"></altar-video-player>`;\r\n\r\n            case \"audio/mpeg\":\r\n            case \"audio/x-wav\":\r\n                import('./editors/altar-audio-player');\r\n                return html`<altar-audio-player .file=\"${this.file}\"></altar-audio-player>`;\r\n\r\n            default: \r\n                return html`File extension not supported (yet ?)`;\r\n                \r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'altar-element': AltarElement;\r\n  }\r\n}\r\n"]}